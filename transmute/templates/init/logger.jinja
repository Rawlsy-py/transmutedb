import logging
import sys

try:
    from prefect import get_run_logger
    PREFECT_AVAILABLE = True
except ImportError:
    PREFECT_AVAILABLE = False

class TransmuteLogger:
    FORMAT = "[{level}] %(asctime)s | %(module)s:%(funcName)s:%(lineno)d | %(message)s"
    DATEFMT = "%Y-%m-%d %H:%M:%S"
    LEVELS = {
        "INFO": logging.INFO,
        "WARN": logging.WARNING,
        "ERROR": logging.ERROR,
    }

    def __init__(self, name=None):
        self.name = name or __name__
        self.logger = logging.getLogger(self.name)
        self.logger.setLevel(logging.INFO)
        handler = logging.StreamHandler(sys.stdout)
        formatter = logging.Formatter(self.FORMAT, self.DATEFMT)
        handler.setFormatter(formatter)
        if not self.logger.handlers:
            self.logger.addHandler(handler)
        self.logger.propagate = False

    def _prefect_logger(self):
        if PREFECT_AVAILABLE:
            try:
                return get_run_logger()
            except Exception:
                return None
        return None

    def _log(self, level, msg, *args, **kwargs):
        prefect_logger = self._prefect_logger()
        if prefect_logger:
            getattr(prefect_logger, level.lower())(msg, *args, **kwargs)
        else:
            self.logger.log(self.LEVELS[level], msg, *args, **kwargs)

    def info(self, msg, *args, **kwargs):
        self._log("INFO", msg, *args, **kwargs)

    def warn(self, msg, *args, **kwargs):
        self._log("WARN", msg, *args, **kwargs)

    def error(self, msg, *args, **kwargs):
        self._log("ERROR", msg, *args, **kwargs)